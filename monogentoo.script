# Copyright (c) 2016 Marco Buzzanca 
#
# Permission is hereby granted, free of charge, to any person
# obtaining a copy of this software and associated documentation
# files (the "Software"), to deal in the Software without
# restriction, including without limitation the rights to use,
# copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following
# conditions:
#
# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
# OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
# HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
# WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
# OTHER DEALINGS IN THE SOFTWARE.

Window.SetBackgroundTopColor(0.0, 0.0, 0.0);
Window.SetBackgroundBottomColor(0.0, 0.0, 0.0);

logo.image = Image("logo.png");
logo.image.Scale(logo.image.GetWidth() * 2, logo.image.GetHeight());
logo.x = Window.GetWidth() / 2 - logo.image.GetWidth() / 2;

# Display spinner and logo if in boot mode
if (Plymouth.GetMode() == "boot")
{
    logo.y = Window.GetHeight() / 2 - logo.image.GetHeight() / 2;

    spinner.image = Image("spinner-0.png");
    spinner.x = Window.GetWidth() / 2 - spinner.image.GetWidth() / 2;
    spinner.y = Window.GetHeight() * 0.8 - spinner.image.GetHeight() / 2;
    spinner.tick = 0;

    spinner.sprite = Sprite(spinner.image);
    spinner.sprite.SetPosition(spinner.x, spinner.y, 0);
}

# Otherwise display a pulsating logo
else
{
    logo.y = Window.GetHeight() / 2 - logo.image.GetHeight() / 2;
    logo.minOpacity = 0.3;
    logo.opacityAngle = 0.0;
}

logo.sprite = Sprite(logo.image);
logo.sprite.SetPosition(logo.x, logo.y, 0);

fun refresh()
{
    # Spinner animation
    if (Plymouth.GetMode() == "boot")
    {
        if (status == "normal")
        {
            frameNo = (spinner.tick++ / 4) % 12;

            spinner.sprite.SetImage(Image("spinner-" + frameNo + ".png"));
            spinner.sprite.SetOpacity(1);
        }

        else
        {
            spinner.sprite.SetOpacity(0);
        }
    }

    # Pulsating logo animation
    else
    {
        # 0.5 Hz pulsating rate
        logo.opacityAngle += ((2 * 3.14) / 50) * 0.5; 

        opacity = (Math.Cos(logo.opacityAngle) + 1) / 2;
        opacity *= 1 - logo.minOpacity;
        opacity += logo.minOpacity;

        logo.sprite.SetOpacity(opacity);
    }
}

Plymouth.SetRefreshFunction(refresh);

# Stuff copied from "script" example, untested. Removed the progress bar part,
# as we're not using that.
# TODO: test on a setup with encryption, it should ask for a password.

status = "normal";

#----------------------------------------- Dialogue --------------------------------

fun dialog_setup()
  {
    local.box;
    local.lock;
    local.entry;
    
    box.image = Image("box.png");
    lock.image = Image("lock.png");
    entry.image = Image("entry.png");
    
    box.sprite = Sprite(box.image);
    box.x = Window.GetX() + Window.GetWidth()  / 2 - box.image.GetWidth ()/2;
    box.y = Window.GetY() + Window.GetHeight() * 0.8 - box.image.GetHeight() / 2;
    box.z = 10000;
    box.sprite.SetPosition(box.x, box.y, box.z);
    
    lock.sprite = Sprite(lock.image);
    lock.x = box.x + box.image.GetWidth()/2 - (lock.image.GetWidth() + entry.image.GetWidth()) / 2;
    lock.y = box.y + box.image.GetHeight()/2 - lock.image.GetHeight()/2;
    lock.z = box.z + 1;
    lock.sprite.SetPosition(lock.x, lock.y, lock.z);
    
    entry.sprite = Sprite(entry.image);
    entry.x = lock.x + lock.image.GetWidth();
    entry.y = box.y + box.image.GetHeight()/2 - entry.image.GetHeight()/2;
    entry.z = box.z + 1;
    entry.sprite.SetPosition(entry.x, entry.y, entry.z);
    
    global.dialog.box = box;
    global.dialog.lock = lock;
    global.dialog.entry = entry;
    global.dialog.bullet_image = Image("bullet.png");
    global.dialog.max_bullets = Math.Int(entry.image.GetWidth() / global.dialog.bullet_image.GetWidth());
    dialog_opacity (1);
  }
    
fun dialog_opacity(opacity)
  {
    dialog.box.sprite.SetOpacity (opacity);
    dialog.lock.sprite.SetOpacity (opacity);
    dialog.entry.sprite.SetOpacity (opacity);
    for (index = 0; dialog.bullet[index]; index++)
      {
        dialog.bullet[index].sprite.SetOpacity(opacity);
      }
  }

fun display_normal_callback ()
  {
    global.status = "normal";
    if (global.dialog)
      dialog_opacity (0);
  }

fun display_password_callback (prompt, bullets)
  {
    global.status = "password";
    if (!global.dialog)
	dialog_setup();
    else
	dialog_opacity(1);
    for (index = 0; dialog.bullet[index] || index < dialog.max_bullets; index++)
      {
        if (!dialog.bullet[index])
          {
            dialog.bullet[index].sprite = Sprite(dialog.bullet_image);
            dialog.bullet[index].x = dialog.entry.x + index * dialog.bullet_image.GetWidth();
            dialog.bullet[index].y = dialog.entry.y + dialog.entry.image.GetHeight() / 2 - dialog.bullet_image.GetHeight() / 2;
            dialog.bullet[index].z = dialog.entry.z + 1;
            dialog.bullet[index].sprite.SetPosition(dialog.bullet[index].x, dialog.bullet[index].y, dialog.bullet[index].z);
          }
        if (index < bullets)
          dialog.bullet[index].sprite.SetOpacity(1);
        else
          dialog.bullet[index].sprite.SetOpacity(0);
      }
  }

Plymouth.SetDisplayNormalFunction(display_normal_callback);
Plymouth.SetDisplayPasswordFunction(display_password_callback);

#----------------------------------------- Quit --------------------------------

fun quit_callback ()
{
  logo.sprite.SetOpacity (1);
}

Plymouth.SetQuitFunction(quit_callback);

#----------------------------------------- Message --------------------------------

message_sprite = Sprite();

fun display_message_callback (text)
{
  local.my_image = Image.Text(text, 1, 1, 1);
  local.x = Window.GetWidth() - my_image.GetWidth() - 10;
  local.y = Window.GetHeight() - my_image.GetHeight() - 10;

  message_sprite.SetImage(my_image);
  message_sprite.SetPosition(x, y, 10000);
}

Plymouth.SetDisplayMessageFunction (display_message_callback);
